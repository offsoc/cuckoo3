# Copyright (C) 2019-2021 Estonian Information System Authority.
# See the file 'LICENSE' for copying permission.

import os
from pathlib import Path

from cuckoo.common.storage import Paths, cuckoocwd
from cuckoo.common.startup import StartupError


def make_nginx_base():
    from cuckoo.web.web.startup import set_path_settings
    from django.conf import settings

    set_path_settings()

    if not settings.STATIC_ROOT:
        raise StartupError(
            f"STATIC_ROOT is not set. Set it in {Paths.web('web_local_settings.py')}"
        )

    static_root = Path(settings.STATIC_ROOT)
    if not static_root.is_dir():
        raise StartupError(
            f"STATIC_ROOT path {static_root} does not exist or is not a directory"
        )

    if not list(static_root.iterdir()):
        raise StartupError(
            f"STATIC_ROOT directory does not contain any static "
            f"files/directories. Run 'cuckoo web djangocommand collectstatic' "
            f"first."
        )

    return f"""# This is a basic NGINX configuration generated by Cuckoo. It is
# recommended to review it and change it where needed. This configuration
# is meant to be used together with the generated uWSGI configuration.
upstream _uwsgi_cuckoo_web {{
    server 127.0.0.1:9090;
}}

server {{
    listen 127.0.0.1:8000;

    # Directly serve the static files for Cuckoo web. Copy 
    # (and update these after Cuckoo updates) these by running:
    # 'cuckoo web djangocommand collectstatic'. The path after alias should
    # be the same path as STATIC_ROOT. These files can be cached. Be sure
    # to clear the cache after any updates.
    location /static {{
        alias {static_root};
    }}
    
    # Pass any non-static requests to the Cuckoo web wsgi application run
    # by uwsgi. It is not recommended to cache paths here, this can cause
    # the UI to no longer reflect the correct state of analyses and tasks.
    location / {{
        client_max_body_size 1G;
        proxy_redirect off;
        proxy_set_header X-Forwarded-Proto $scheme;
        include uwsgi_params;
        uwsgi_pass _uwsgi_cuckoo_web;
    }}
}}
"""


def make_uwsgi_base():
    import cuckoo.web
    from cuckoo.common.utils import getuser

    cfg = f"""; This is a basic uWSGI configuration generated by Cuckoo. It is
; recommended to review it and change it where needed. This configuration
; is meant to be used together with the generated NGINX configuration.
[uwsgi]
; To run this, the uwsgi-plugin-python3 system package must be installed or
; it must be run from a Python3 installation that has uwsgi installed.
plugins = python3,logfile
chdir = {cuckoo.web.__path__[0]}
wsgi-file = web/wsgi.py
; The socket for NGINX to talk to. This should not listen on other
; addresses than localhost.
socket = 127.0.0.1:9090

; Verify that the users below are not root users and can read/write to/from 
; the Cuckoo CWD and installation. The configuration generator simply enters
; the user generating the configuration.
uid = {getuser()}
gid = {getuser()}

need-app = true
master = true
env = CUCKOO_APP=web
env = CUCKOO_CWD={cuckoocwd.root}
env = CUCKOO_LOGLEVEL=debug

; Log uWSGI app and Cuckoo web logs to the following file. Change this to
; any path, but be sure the uid/gid user has write permissions to this path. 
logger = file:logfile=/tmp/cuckooweb-uwsgi.log"""

    if os.environ.get("VIRTUAL_ENV"):
        cfg += f"""

; The path of the Python 3 virtualenv Cuckoo is installed in.
virtualenv = {os.environ["VIRTUAL_ENV"]}"""

    return cfg
